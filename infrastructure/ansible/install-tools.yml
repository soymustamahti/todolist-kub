---
- name: Install ArgoCD using Helm
  hosts: masters
  become: yes
  vars:
    argocd_namespace: argocd
    helm_version: "3.12.0"

  tasks:
    - name: Install required Python packages via apt
      apt:
        name:
          - python3-pip
          - python3-kubernetes
          - python3-yaml
          - python3-jsonpatch
        state: present
        update_cache: yes

    - name: Install Helm
      block:
        - name: Download Helm installer script
          get_url:
            url: https://get.helm.sh/helm-v{{ helm_version }}-linux-amd64.tar.gz
            dest: /tmp/helm.tar.gz

        - name: Extract Helm
          unarchive:
            src: /tmp/helm.tar.gz
            dest: /tmp
            remote_src: yes

        - name: Move Helm binary
          shell: |
            cp /tmp/linux-amd64/helm /usr/local/bin/helm
            chmod +x /usr/local/bin/helm

    - name: Create ArgoCD namespace
      kubernetes.core.k8s:
        name: "{{ argocd_namespace }}"
        api_version: v1
        kind: Namespace
        state: present
        kubeconfig: /root/.kube/config

    - name: Add ArgoCD Helm repository
      shell: |
        export KUBECONFIG=/root/.kube/config
        helm repo add argo https://argoproj.github.io/argo-helm
        helm repo update
      environment:
        KUBECONFIG: /root/.kube/config

    - name: Install ArgoCD with Helm
      shell: |
        export KUBECONFIG=/root/.kube/config
        helm upgrade --install argocd argo/argo-cd \
          --namespace {{ argocd_namespace }} \
          --create-namespace \
          --set server.service.type=NodePort \
          --set server.service.nodePortHttp=30080 \
          --set server.service.nodePortHttps=30443 \
          --set configs.params."server\.insecure"=true \
          --timeout=10m
      environment:
        KUBECONFIG: /root/.kube/config
      register: argocd_install
      failed_when: argocd_install.rc != 0

    - name: Wait for ArgoCD to be ready
      shell: |
        export KUBECONFIG=/root/.kube/config
        kubectl wait --for=condition=available --timeout=600s deployment/argocd-server -n {{ argocd_namespace }}
      environment:
        KUBECONFIG: /root/.kube/config
      ignore_errors: yes

    - name: Get ArgoCD initial admin password
      shell: |
        export KUBECONFIG=/root/.kube/config
        kubectl get secret argocd-initial-admin-secret -n {{ argocd_namespace }} -o jsonpath="{.data.password}" | base64 -d
      environment:
        KUBECONFIG: /root/.kube/config
      register: argocd_password_result
      ignore_errors: yes

    - name: Display ArgoCD access information
      debug:
        msg: |
          ArgoCD is now accessible at:
          - Internal: http://argocd-server.argocd.svc.cluster.local
          - External: http://{{ ansible_default_ipv4.address }}:30080
          - HTTPS: https://{{ ansible_default_ipv4.address }}:30443

          Login credentials:
          - Username: admin
          - Password: {{ argocd_password_result.stdout | default('Check the argocd-initial-admin-secret') }}

- name: Install Prometheus Stack using Helm
  hosts: masters
  become: yes
  vars:
    monitoring_namespace: monitoring

  tasks:
    - name: Add Prometheus Community Helm repository
      shell: |
        export KUBECONFIG=/root/.kube/config
        helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
        helm repo update
      environment:
        KUBECONFIG: /root/.kube/config

    - name: Install Prometheus Stack with Helm
      shell: |
        export KUBECONFIG=/root/.kube/config
        helm upgrade --install prometheus-stack prometheus-community/kube-prometheus-stack \
          --namespace {{ monitoring_namespace }} \
          --create-namespace \
          --set prometheus.service.type=NodePort \
          --set prometheus.service.nodePort=30090 \
          --set grafana.service.type=NodePort \
          --set grafana.service.nodePort=30091 \
          --set grafana.adminPassword=admin123 \
          --set alertmanager.service.type=NodePort \
          --set alertmanager.service.nodePort=30092 \
          --timeout=10m
      environment:
        KUBECONFIG: /root/.kube/config
      register: prometheus_install
      failed_when: prometheus_install.rc != 0

    - name: Display Prometheus Stack access information
      debug:
        msg: |
          Monitoring tools are accessible at:
          - Prometheus: http://{{ ansible_default_ipv4.address }}:30090
          - Grafana: http://{{ ansible_default_ipv4.address }}:30091 (admin/admin123)
          - AlertManager: http://{{ ansible_default_ipv4.address }}:30092

- name: Install Traefik Ingress Controller
  hosts: masters
  become: yes
  vars:
    traefik_namespace: traefik-system

  tasks:
    - name: Add Traefik Helm repository
      shell: |
        export KUBECONFIG=/root/.kube/config
        helm repo add traefik https://helm.traefik.io/traefik
        helm repo update
      environment:
        KUBECONFIG: /root/.kube/config

    - name: Install Traefik with Helm
      shell: |
        export KUBECONFIG=/root/.kube/config
        helm upgrade --install traefik traefik/traefik \
          --namespace {{ traefik_namespace }} \
          --create-namespace \
          --set service.type=NodePort \
          --set ports.web.nodePort=30082 \
          --set ports.websecure.nodePort=30444 \
          --set ingressRoute.dashboard.enabled=true \
          --timeout=10m
      environment:
        KUBECONFIG: /root/.kube/config
      register: traefik_install
      failed_when: traefik_install.rc != 0

    - name: Display Traefik access information
      debug:
        msg: |
          Traefik Dashboard is accessible at:
          - HTTP: http://{{ ansible_default_ipv4.address }}:30082/dashboard/
          - HTTPS: https://{{ ansible_default_ipv4.address }}:30444/dashboard/
