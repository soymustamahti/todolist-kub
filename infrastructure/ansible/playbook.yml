---
- name: Setup Kubernetes Cluster
  hosts: k8s_cluster
  become: yes
  vars:
    k8s_version: "{{ kubernetes_version | default('1.28.2') }}"
    containerd_version: "1.7.2"

  tasks:
    - name: Fix conflicting Docker repository configurations
      block:
        - name: Remove all existing Docker repository sources
          shell: |
            rm -f /etc/apt/sources.list.d/docker*.list
            rm -f /etc/apt/sources.list.d/*docker*
          ignore_errors: yes

        - name: Remove all existing Docker GPG keys
          shell: |
            rm -f /usr/share/keyrings/docker*.gpg
            rm -f /etc/apt/keyrings/docker*.gpg
            rm -f /etc/apt/keyrings/docker*.asc
          ignore_errors: yes

        - name: Clean apt cache
          shell: |
            apt clean
            rm -rf /var/lib/apt/lists/*
          ignore_errors: yes

        - name: Fix any broken packages
          shell: |
            dpkg --configure -a
            apt --fix-broken install -y
          ignore_errors: yes

    - name: Update system packages
      apt:
        update_cache: yes
        upgrade: dist

    - name: Install required packages
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
          - software-properties-common
        state: present

    - name: Disable swap
      shell: |
        swapoff -a
        sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab

    - name: Load kernel modules
      modprobe:
        name: "{{ item }}"
      loop:
        - overlay
        - br_netfilter

    - name: Configure kernel modules to load on boot
      lineinfile:
        path: /etc/modules-load.d/k8s.conf
        line: "{{ item }}"
        create: yes
      loop:
        - overlay
        - br_netfilter

    - name: Configure sysctl for Kubernetes
      sysctl:
        name: "{{ item.key }}"
        value: "{{ item.value }}"
        sysctl_file: /etc/sysctl.d/k8s.conf
        reload: yes
      loop:
        - { key: net.bridge.bridge-nf-call-iptables, value: 1 }
        - { key: net.bridge.bridge-nf-call-ip6tables, value: 1 }
        - { key: net.ipv4.ip_forward, value: 1 }

    - name: Install containerd
      block:
        - name: Remove existing Docker repository sources
          file:
            path: "{{ item }}"
            state: absent
          loop:
            - /etc/apt/sources.list.d/docker.list
            - /etc/apt/sources.list.d/docker-ce.list
          ignore_errors: yes

        - name: Remove existing Docker GPG keys
          file:
            path: "{{ item }}"
            state: absent
          loop:
            - /usr/share/keyrings/docker-archive-keyring.gpg
            - /etc/apt/keyrings/docker.gpg
          ignore_errors: yes

        - name: Update apt cache
          apt:
            update_cache: yes

        - name: Create keyrings directory
          file:
            path: /etc/apt/keyrings
            state: directory
            mode: "0755"

        - name: Download Docker GPG key
          get_url:
            url: https://download.docker.com/linux/ubuntu/gpg
            dest: /etc/apt/keyrings/docker.asc
            mode: "0644"

        - name: Add Docker repository
          apt_repository:
            repo: "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
            state: present

        - name: Install containerd
          apt:
            name: containerd.io
            state: present

        - name: Create containerd config directory
          file:
            path: /etc/containerd
            state: directory

        - name: Generate containerd config
          shell: containerd config default > /etc/containerd/config.toml

        - name: Configure containerd to use systemd cgroup driver
          replace:
            path: /etc/containerd/config.toml
            regexp: "SystemdCgroup = false"
            replace: "SystemdCgroup = true"

        - name: Restart and enable containerd
          systemd:
            name: containerd
            state: restarted
            enabled: yes

    - name: Install Kubernetes packages
      block:
        - name: Create Kubernetes keyrings directory
          file:
            path: /etc/apt/keyrings
            state: directory
            mode: "0755"

        - name: Download Kubernetes GPG key
          get_url:
            url: https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key
            dest: /etc/apt/keyrings/kubernetes-apt-keyring.asc
            mode: "0644"

        - name: Add Kubernetes repository
          apt_repository:
            repo: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.asc] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /"
            state: present

        - name: Install kubelet, kubeadm, and kubectl
          apt:
            name:
              - kubelet
              - kubeadm
              - kubectl
            state: present

        - name: Hold Kubernetes packages
          dpkg_selections:
            name: "{{ item }}"
            selection: hold
          loop:
            - kubelet
            - kubeadm
            - kubectl

        - name: Enable kubelet
          systemd:
            name: kubelet
            enabled: yes

- name: Initialize Kubernetes Master
  hosts: masters
  become: yes
  tasks:
    - name: Check if Kubernetes is already initialized
      stat:
        path: /etc/kubernetes/admin.conf
      register: kubeconfig_exists

    - name: Initialize Kubernetes cluster
      shell: |
        kubeadm init \
          --pod-network-cidr={{ pod_network_cidr }} \
          --service-cidr={{ service_cidr }} \
          --apiserver-advertise-address={{ ansible_default_ipv4.address }}
      register: kubeadm_init
      changed_when: "'Your Kubernetes control-plane has initialized successfully!' in kubeadm_init.stdout"
      when: not kubeconfig_exists.stat.exists

    - name: Create kube config directory for root
      file:
        path: /root/.kube
        state: directory

    - name: Copy admin.conf to kube config
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /root/.kube/config
        remote_src: yes
        owner: root
        group: root
        mode: "0600"

    - name: Create kube config directory for current user
      file:
        path: "/home/{{ ansible_user }}/.kube"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
      when: ansible_user != "root"

    - name: Copy admin.conf for current user
      copy:
        src: /etc/kubernetes/admin.conf
        dest: "/home/{{ ansible_user }}/.kube/config"
        remote_src: yes
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: "0600"
      when: ansible_user != "root"

    - name: Install Flannel CNI
      shell: kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
      when: not kubeconfig_exists.stat.exists or kubeadm_init is changed

    - name: Get join command
      shell: kubeadm token create --print-join-command
      register: join_command

    - name: Save join command to file on master node
      copy:
        content: "{{ join_command.stdout }}"
        dest: "/tmp/join-command.sh"
        mode: "0755"

- name: Join Worker Nodes
  hosts: workers
  become: yes
  tasks:
    - name: Check if node is already joined to cluster
      stat:
        path: /etc/kubernetes/kubelet.conf
      register: kubelet_conf_exists

    - name: Get join command from master
      slurp:
        src: "/tmp/join-command.sh"
      register: join_command_content
      delegate_to: "{{ groups['masters'][0] }}"
      when: not kubelet_conf_exists.stat.exists

    - name: Copy join command to worker nodes
      copy:
        content: "{{ join_command_content['content'] | b64decode }}"
        dest: "/tmp/join-command.sh"
        mode: "0755"
      when: not kubelet_conf_exists.stat.exists

    - name: Join worker nodes to cluster
      shell: /tmp/join-command.sh
      register: join_result
      changed_when: "'This node has joined the cluster' in join_result.stdout"
      when: not kubelet_conf_exists.stat.exists
