---
- name: Setup Kubernetes Cluster with Docker and cri-dockerd
  hosts: k8s_cluster
  become: yes
  vars:
    k8s_version: "1.28"
    cri_dockerd_version: "0.3.16"

  tasks:
    - name: Update system packages
      apt:
        update_cache: yes
        upgrade: dist

    - name: Install required packages
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
          - software-properties-common
          - socat
          - bash-completion
        state: present

    - name: Install Docker
      block:
        - name: Create keyrings directory
          file:
            path: /etc/apt/keyrings
            state: directory
            mode: "0755"

        - name: Add Docker GPG key
          shell: |
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
            chmod a+r /etc/apt/keyrings/docker.asc

        - name: Add Docker repository
          shell: |
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}") stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null

        - name: Update apt after adding Docker repo
          apt:
            update_cache: yes

        - name: Install Docker packages
          apt:
            name:
              - docker-ce
              - docker-ce-cli
              - containerd.io
              - docker-buildx-plugin
              - docker-compose-plugin
            state: present

        - name: Add user to docker group
          user:
            name: "{{ ansible_user }}"
            groups: docker
            append: yes

        - name: Start and enable Docker service
          systemd:
            name: docker
            state: started
            enabled: yes

    - name: Install cri-dockerd
      block:
        - name: Download cri-dockerd package
          get_url:
            url: "https://github.com/Mirantis/cri-dockerd/releases/download/v{{ cri_dockerd_version }}/cri-dockerd_{{ cri_dockerd_version }}.3-0.ubuntu-jammy_amd64.deb"
            dest: "/tmp/cri-dockerd.deb"

        - name: Install cri-dockerd package
          apt:
            deb: "/tmp/cri-dockerd.deb"
            state: present

        - name: Remove cri-dockerd package file
          file:
            path: "/tmp/cri-dockerd.deb"
            state: absent

        - name: Start and enable cri-dockerd service
          systemd:
            name: cri-docker
            state: started
            enabled: yes

    - name: Disable swap
      shell: |
        swapoff -a
        sed -i '/swap/ s/^/#/' /etc/fstab

    - name: Configure IPv4 packet forwarding
      block:
        - name: Create sysctl config for Kubernetes
          copy:
            content: |
              net.ipv4.ip_forward = 1
            dest: /etc/sysctl.d/k8s.conf

        - name: Apply sysctl settings
          shell: sysctl --system

    - name: Install Kubernetes packages
      block:
        - name: Add Kubernetes GPG key
          shell: |
            curl -fsSL https://pkgs.k8s.io/core:/stable:/v{{ k8s_version }}/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg

        - name: Add Kubernetes repository
          shell: |
            echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v{{ k8s_version }}/deb/ /' | tee /etc/apt/sources.list.d/kubernetes.list

        - name: Update apt after adding Kubernetes repo
          apt:
            update_cache: yes

        - name: Install Kubernetes packages
          apt:
            name:
              - kubelet
              - kubeadm
              - kubectl
            state: present

        - name: Hold Kubernetes packages
          shell: apt-mark hold kubelet kubeadm kubectl

- name: Initialize Kubernetes Master
  hosts: masters
  become: yes
  vars:
    pod_network_cidr: "{{ pod_network_cidr | default('192.168.0.0/16') }}"
    api_server_ip: "{{ ansible_host }}"

  tasks:
    - name: Configure kubelet node IP
      copy:
        content: |
          KUBELET_EXTRA_ARGS=--node-ip={{ ansible_host }}
        dest: /etc/default/kubelet

    - name: Enable and start kubelet
      systemd:
        name: kubelet
        state: started
        enabled: yes

    - name: Initialize Kubernetes cluster
      shell: |
        kubeadm init --pod-network-cidr={{ pod_network_cidr }} --cri-socket=unix:///var/run/cri-dockerd.sock --apiserver-advertise-address={{ api_server_ip }}
      register: kubeadm_init
      ignore_errors: yes

    - name: Create kube config directory for root
      file:
        path: ~/.kube
        state: directory
        mode: "0755"

    - name: Copy admin.conf to root kube config
      copy:
        src: /etc/kubernetes/admin.conf
        dest: ~/.kube/config
        remote_src: yes
        owner: root
        group: root
        mode: "0644"

    - name: Create kube config directory for ansible user
      file:
        path: "/home/{{ ansible_user }}/.kube"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: "0755"
      when: ansible_user != "root"

    - name: Copy admin.conf to ansible user kube config
      copy:
        src: /etc/kubernetes/admin.conf
        dest: "/home/{{ ansible_user }}/.kube/config"
        remote_src: yes
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: "0644"
      when: ansible_user != "root"

    - name: Deploy Calico network
      shell: |
        kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.29.2/manifests/tigera-operator.yaml
        kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.29.2/manifests/custom-resources.yaml
      environment:
        KUBECONFIG: ~/.kube/config
      ignore_errors: yes

    - name: Generate cluster join command
      shell: kubeadm token create --print-join-command
      register: join_command

    - name: Save join command to file
      copy:
        content: |
          #!/usr/bin/env bash
          {{ join_command.stdout }} --cri-socket=unix:///var/run/cri-dockerd.sock
        dest: /tmp/joincluster.sh
        mode: "0755"

    - name: Fetch join command to local machine
      fetch:
        src: /tmp/joincluster.sh
        dest: /tmp/joincluster.sh
        flat: yes

    - name: Add kubectl autocompletion for ansible user
      lineinfile:
        path: "/home/{{ ansible_user }}/.bashrc"
        line: "source <(kubectl completion bash)"
      when: ansible_user != "root"

    - name: Install Helm
      block:
        - name: Add Helm GPG key
          shell: |
            curl https://baltocdn.com/helm/signing.asc | gpg --dearmor | tee /usr/share/keyrings/helm.gpg > /dev/null

        - name: Add Helm repository
          shell: |
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main" | tee /etc/apt/sources.list.d/helm-stable-debian.list

        - name: Update apt and install Helm
          apt:
            update_cache: yes
            name: helm
            state: present

        - name: Add Helm autocompletion
          lineinfile:
            path: "/home/{{ ansible_user }}/.bashrc"
            line: "source <(helm completion bash)"
          when: ansible_user != "root"

    - name: Install ArgoCD CLI
      block:
        - name: Get latest ArgoCD version
          shell: curl -L -s https://raw.githubusercontent.com/argoproj/argo-cd/stable/VERSION
          register: argocd_version

        - name: Download ArgoCD CLI
          get_url:
            url: "https://github.com/argoproj/argo-cd/releases/download/v{{ argocd_version.stdout }}/argocd-linux-amd64"
            dest: /tmp/argocd-linux-amd64
            mode: "0755"

        - name: Install ArgoCD CLI
          copy:
            src: /tmp/argocd-linux-amd64
            dest: /usr/local/bin/argocd
            remote_src: yes
            mode: "0755"

        - name: Remove temporary ArgoCD file
          file:
            path: /tmp/argocd-linux-amd64
            state: absent

        - name: Add ArgoCD autocompletion
          lineinfile:
            path: "/home/{{ ansible_user }}/.bashrc"
            line: "source <(argocd completion bash)"
          when: ansible_user != "root"

    - name: Install k9s
      block:
        - name: Download k9s
          get_url:
            url: "https://github.com/derailed/k9s/releases/download/v0.40.10/k9s_linux_amd64.deb"
            dest: /tmp/k9s.deb

        - name: Install k9s
          apt:
            deb: /tmp/k9s.deb
            state: present

        - name: Remove k9s package file
          file:
            path: /tmp/k9s.deb
            state: absent

    - name: Create necessary namespaces
      shell: |
        kubectl create namespace argocd
        kubectl create namespace metallb-system
        kubectl create namespace traefik
        kubectl create namespace monitoring
      environment:
        KUBECONFIG: ~/.kube/config
      ignore_errors: yes

- name: Join Worker Nodes
  hosts: workers
  become: yes

  tasks:
    - name: Configure kubelet node IP
      copy:
        content: |
          KUBELET_EXTRA_ARGS=--node-ip={{ ansible_host }}
        dest: /etc/default/kubelet

    - name: Enable and start kubelet
      systemd:
        name: kubelet
        state: started
        enabled: yes

    - name: Copy join command to worker
      copy:
        src: /tmp/joincluster.sh
        dest: /tmp/joincluster.sh
        mode: "0755"

    - name: Join worker to cluster
      shell: bash /tmp/joincluster.sh
      ignore_errors: yes
